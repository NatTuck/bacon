%{ # -*- perl -*-
# Based on ANSI C yacc grammar origionally by Jeff Lee, taken from
# http://www.lysator.liu.se/c/ANSI-C-grammar-y.html

use warnings FATAL => 'all';
use strict;
use 5.10.0;

use Data::Dumper;
use Carp;
use Try::Tiny;

use Exporter;
push @ISA, qw(Exporter);
our @EXPORT = qw(bacon_parse);

use Bacon::Lexer qw(make_lexer);

use Bacon::Token;
use Bacon::Type::All;
use Bacon::TreeNodes;
use Bacon::Utils;

sub parse_error {
    my ($parser) = @_;
    warn "Got a parsing error.\n";
    warn "Value: ", Dumper($parser->YYCurval), "\n";
    warn "Token: ", $parser->YYCurtok, "\n";
    warn "Expect: ", join(' ', $parser->YYExpect), "\n";
    die "Giving up";
    return 1;
}

sub bacon_parse {
    my ($source) = @_;

    my $lexer  = make_lexer($source);

    my $parser = Bacon::Parser->new();
    $parser->YYData->{pgm} = Bacon::Program->new(source => "$source:1");
    $parser->YYParse(yylex => $lexer, yyerror => \&parse_error);
    return $parser->YYData->{pgm};
}

sub op {
    my ($op, @args) = @_;
    map { assert_type($_, 'Bacon::Expr') } @args;
    my $argc = scalar @args;

    if ($argc == 2) {
        return Bacon::Expr::BinaryOp->new3($op, @args);
    }
    else {
        confess("Can't handle operator with $argc arguments");
    }
}

sub var_decl {
    my ($info, $type) = @_;
    assert_type($type, "Bacon::Type");
    my $name = $info->{name} or
        confess Dumper($info);
    my $var = Bacon::Variable->new(
        name => $name->text, 
        type => $type);    
    return Bacon::Stmt::VarDecl->new(
        name => $info->{name},
        dims => $info->{dims},
        init => $info->{init},
        var  => $var);
}

%}

%start translation_unit

%expect 1

%%

/*                                                                       expressions */

primary_expression
    : CONSTANT
        { Bacon::Expr::Literal->new(value => $_[1]) }
    | IDENTIFIER
        { Bacon::Expr::Identifier->new(name => $_[1]) }
    | STRING
        { Bacon::Expr::String->new1($_[1]) }
    | '(' expression ')'
        { $_[2] }
    ;

postfix_expression
    : primary_expression
    | IDENTIFIER '[' argument_expression_list ']'
        { Bacon::Expr::ArrayIndex->new(name => $_[1], dims => [ @{$_[3]} ]) }
    | IDENTIFIER '(' ')'
        { Bacon::Expr::FunCall->new(name => $_[1]) }
    | IDENTIFIER '(' argument_expression_list ')'
        { Bacon::Expr::FunCall->new(name => $_[1], args => [ @{$_[3]} ]) }
    | IDENTIFIER '.' IDENTIFIER
        { Bacon::Expr::FieldAccess->new(name => $_[1], field => $_[3]) }
    | postfix_expression PTR_OP IDENTIFIER
        { op($_[2], $_[1], Bacon::Expr::Identifier->new(name => $_[3])) }
    | postfix_expression INC_OP
        { Bacon::Expr::UnaryOp->new(name => $_[2], arg0 => $_[1], post => 1) }
    | postfix_expression DEC_OP
        { Bacon::Expr::UnaryOp->new(name => $_[2], arg0 => $_[1], post => 1) }
    ;

argument_expression_list
    : assignment_expression
        { [ $_[1] ] }
    | argument_expression_list ',' assignment_expression
        { [ @{$_[1]}, $_[3] ] }
    ;

unary_expression
    : postfix_expression
    | INC_OP unary_expression
        { Bacon::Expr::UnaryOp->new(name => $_[1], arg0 => $_[2], post => 0) } 
    | DEC_OP unary_expression
        { Bacon::Expr::UnaryOp->new(name => $_[1], arg0 => $_[2], post => 0) } 
    | unary_operator cast_expression
        { Bacon::Expr::UnaryOp->new(name => $_[1], arg0 => $_[2], post => 0) } 
    | SIZEOF unary_expression
        { Bacon::Expr::UnaryOp->new(name => $_[1], arg0 => $_[2], post => 0) } 
    | SIZEOF '(' type_specifier ')'
        { die("todo: sizeof type") }
    ;

unary_operator
    : '&'
    | '*'
    | '+'
    | '-'
    | '~'
    | '!'
    ;

cast_expression
    : unary_expression
    | '(' type_specifier ')' cast_expression
        { Bacon::Expr::Cast->new(type => $_[2]->type, arg0 => $_[4]) }
    ;

multiplicative_expression
    : cast_expression
    | multiplicative_expression '*' cast_expression
        { op($_[2], $_[1], $_[3]) }
    | multiplicative_expression '/' cast_expression
        { op($_[2], $_[1], $_[3]) }
    | multiplicative_expression '%' cast_expression
        { op($_[2], $_[1], $_[3]) }
    ;

additive_expression
    : multiplicative_expression
    | additive_expression '+' multiplicative_expression
        { op($_[2], $_[1], $_[3]) }
    | additive_expression '-' multiplicative_expression
        { op($_[2], $_[1], $_[3]) }
    ;

shift_expression
    : additive_expression
    | shift_expression LEFT_OP additive_expression
        { op($_[2], $_[1], $_[3]) }
    | shift_expression RIGHT_OP additive_expression
        { op($_[2], $_[1], $_[3]) }
    ;

relational_expression
    : shift_expression
    | relational_expression '<' shift_expression
        { op($_[2], $_[1], $_[3]) }
    | relational_expression '>' shift_expression
        { op($_[2], $_[1], $_[3]) }
    | relational_expression LE_OP shift_expression
        { op($_[2], $_[1], $_[3]) }
    | relational_expression GE_OP shift_expression
        { op($_[2], $_[1], $_[3]) }
    ;

equality_expression
    : relational_expression
    | equality_expression EQ_OP relational_expression
        { op($_[2], $_[1], $_[3]) }
    | equality_expression NE_OP relational_expression
        { op($_[2], $_[1], $_[3]) }
    ;

and_expression
    : equality_expression
    | and_expression '&' equality_expression
        { op($_[2], $_[1], $_[3]) }
    ;

exclusive_or_expression
    : and_expression
    | exclusive_or_expression '^' and_expression
        { op($_[2], $_[1], $_[3]) }
    ;

inclusive_or_expression
    : exclusive_or_expression
    | inclusive_or_expression '|' exclusive_or_expression
        { op($_[2], $_[1], $_[3]) }
    ;

logical_and_expression
    : inclusive_or_expression
    | logical_and_expression AND_OP inclusive_or_expression
        { op($_[2], $_[1], $_[3]) }
    ;

logical_or_expression
    : logical_and_expression
    | logical_or_expression OR_OP logical_and_expression
        { op($_[2], $_[1], $_[3]) }
    ;

conditional_expression
    : logical_or_expression
    | logical_or_expression '?' expression ':' conditional_expression
        { Bacon::Expr::Conditional->new3($_[1], $_[3], $_[5]) } 
    ;

assignment_expression
    : conditional_expression
    | unary_expression assignment_operator assignment_expression
        { op($_[2], $_[1], $_[3]) }
    ;

assignment_operator
    : '='
    | MUL_ASSIGN
    | DIV_ASSIGN
    | MOD_ASSIGN
    | ADD_ASSIGN
    | SUB_ASSIGN
    | LEFT_ASSIGN
    | RIGHT_ASSIGN
    | AND_ASSIGN
    | XOR_ASSIGN
    | OR_ASSIGN
    ;

expression
    : assignment_expression
    | expression ',' assignment_expression
        { op($_[2]->text, $_[1], $_[3]) }
    ;

constant_expression
    : conditional_expression
    ;

/*                                                                  declarations */

declaration
    : type_specifier declarator_list ';'
        { [map { var_decl($_, $_[1]) } @{$_[2]}] }
    ;

declarator_list
    : declarator
        { [$_[1]] }
    | declarator_list ',' declarator
        { [@{$_[1]}, $_[3]] }
    ;

declarator
    : IDENTIFIER
        { {name => $_[1]} } 
    | IDENTIFIER '[' argument_expression_list ']'
        { {name => $_[1], dims => $_[3]} }
    | IDENTIFIER '=' initializer
        { {name => $_[1], init => $_[3]} }
    ;

/*                                                                              types */

type_qualifier
    : CONST
    | VOLATILE
    ;

simple_type
    : CHAR
    | UCHAR
    | SHORT
    | USHORT
    | INT
    | UINT
    | LONG
    | ULONG
    | FLOAT
    | DOUBLE
    ;

parameterized_type
    : ARRAY
    | ARRAY2D
    | ARRAY3D
    | ARRAY2Z
    | ARRAY3Z
    | IMAGE2D
    | IMAGE3D
    ;

type_specifier
    : parameterized_type_specifier
    | simple_type
        { Bacon::Type::Simple->new1($_[1]->text) }
    | VOID
        { Bacon::Type::Simple->new1($_[1]->text) }
    | pointer_type
    | type_qualifier type_specifier
        { $_[2]->add_qualifier($_[1]->text); }
    ;

parameterized_type_specifier
    : parameterized_type '<' simple_type '>'
        { Bacon::Type->new_ptype($_[1]->text, $_[3]->text) }
    | scope_specifier parameterized_type '<' simple_type '>'
        { Bacon::Type->new_ptype($_[2]->text, $_[4]->text, $_[1]->text) }
    ;


pointer_type
    : simple_type '*'
        { Bacon::Type::Pointer->new1($_[1]->text) }
    | VOID '*'
        { Bacon::Type::Pointer->new1($_[1]->text) }
    | scope_specifier simple_type '*'
        { Bacon::Type::Pointer->new1($_[2]->text, $_[1]->text) }
    | scope_specifier VOID '*'
        { Bacon::Type::Pointer->new1($_[2]->text, $_[1]->text) }
    ;

scope_specifier
    : PRIVATE
    | LOCAL
    | GLOBAL
    ;

function_declarator
    : IDENTIFIER '(' parameter_list ')'
        { { name => $_[1], args => $_[3] } }
    | IDENTIFIER '(' ')'
        { { name => $_[1], args => [] } }
    ;

parameter_list
    : parameter_declaration
        { [ $_[1] ] }
    | parameter_list ',' parameter_declaration
        { [ @{$_[1]}, $_[3] ] }
    ;

parameter_declaration
    : type_specifier IDENTIFIER
        { Bacon::Variable->new(name => $_[2]->text, type => $_[1]) }
    ;

initializer
    : assignment_expression
    | '{' initializer_list '}'
        { die "No array initializers."; } 
    | '{' initializer_list ',' '}'
        { die "No array initializers."; } 
    ;

initializer_list
    : initializer
        { [ $_[1] ] }
    | initializer_list ',' initializer
        { [ @$_[1], $_[3] ] }
    ;

/*                                                                         statements */

statement
    : labeled_statement
    | compound_statement
    | expression_statement
    | selection_statement
    | iteration_statement
    | jump_statement
    | error_statement
    ;

labeled_statement
    : IDENTIFIER ':' statement
        { Bacon::Stmt::WithLabel->new2($_[1], $_[3]) }
    | CASE constant_expression ':' statement
        { Bacon::Stmt::WithLabel->new_case($_[2], $_[4]) }
    | DEFAULT ':' statement
        { Bacon::Stmt::WithLabel->new2($_[1], $_[3]) }
    ;

compound_statement
    : '{' '}'
        { Bacon::Stmt::Block->new(token => $_[1]) }
    | '{' statement_list '}'
        { Bacon::Stmt::Block->new(token => $_[1], body => $_[2]) }
    ;

statement_list
    : statement
        { [ $_[1] ] }
    | declaration
        { [ @{$_[1]} ] } 
    | statement_list statement
        { [ @{$_[1]}, $_[2] ] }
    | statement_list declaration
        { [ @{$_[1]}, @{$_[2]} ] } 
    ;

expression_statement
    : ';'
        { Bacon::Stmt->new(token => $_[1]) }
    | expression ';'
        { Bacon::Stmt::Expr->new2($_[2], $_[1]) }
    ;

selection_statement
    : IF '(' expression ')' statement
        { Bacon::Stmt::IfElse->new3($_[1], $_[3], $_[5]) }
    | IF '(' expression ')' statement ELSE statement
        { Bacon::Stmt::IfElse->new4($_[1], $_[3], $_[5], $_[7]) }
    | SWITCH '(' expression ')' statement
        { Bacon::SwitchStmt->new2($_[3], $_[5]) }
    ;

for_var_init
    : expression_statement
    | type_specifier IDENTIFIER '=' expression_statement
        { var_decl({name => $_[2], init => $_[4]->expr}, $_[1]) }
    ;

iteration_statement
    : WHILE '(' expression ')' statement
        { Bacon::WhileLoop->new(token => $_[1], cond => $_[3], body => $_[5]) }
    | DO statement WHILE '(' expression ')' ';'
        { Bacon::DoLoop->new(token => $_[1], cond => $_[5], body => $_[2]) }
    | FOR '(' for_var_init expression_statement ')' statement
        { Bacon::Stmt::For->new(token => $_[1], init => $_[3], cond => $_[4]->expr, body => $_[6]) }
    | FOR '(' for_var_init expression_statement expression ')' statement
        { Bacon::Stmt::For->new(token => $_[1], init => $_[3], cond => $_[4]->expr, 
              incr => $_[5], body => $_[7]) }
    ;

jump_statement
    : GOTO IDENTIFIER ';'
        { die "No 'goto' in Bacon at " . $_[1]->source . "\n"; }
    | CONTINUE ';'
        { Bacon::Stmt::Raw->new(code => $_[1]); } 
    | BREAK ';'
        { Bacon::Stmt::Raw->new(code => $_[1]); } 
    | RETURN ';'
        { Bacon::Stmt::Return->new(name => $_[1]) }
    | RETURN expression ';'
        { Bacon::Stmt::Return->new(name => $_[1], expr => $_[2]) }
    ;

error_statement
    : FAIL '(' argument_expression_list ')' ';'
        { Bacon::Stmt::Error->new2($_[1], $_[3]); }
    | ASSERT '(' argument_expression_list ')' ';'
        { Bacon::Stmt::Error->new2($_[1], $_[3]); }
    ;

/*                                                                      top level declarations */

translation_unit
    : external_declaration
    | translation_unit external_declaration
    ;

external_declaration
    : kernel_definition
        { $_[0]->YYData->{pgm}->add_function($_[1]); }
    | function_definition
        { $_[0]->YYData->{pgm}->add_function($_[1]); }
    | declaration
        { $_[0]->YYData->{pgm}->add_constant($_[1]); }
    ;

kernel_range_spec
    : RANGE '[' argument_expression_list ']' ';'
        { {range => $_[3]} }
    ;

kernel_group_spec
    : GROUP '[' argument_expression_list ']' ';'
        { {group => $_[3]} }
    ;

kernel_ranges
    : kernel_range_spec
        { \$_[1] }
    | kernel_group_spec
        { \$_[1] }
    | kernel_range_spec kernel_group_spec
        { \{%{$_[1]}, %{$_[2]}} } 
    ;

kernel_body
    : '{' SETUP statement_list BODY kernel_ranges statement_list '}'
        { { setup => Bacon::Stmt::Block->new(token => $_[2], body => $_[3]), 
            ranges => ${$_[5]}, 
            body => Bacon::Stmt::Block->new(token => $_[4], body => $_[6]) } } 
    | '{' BODY kernel_ranges statement_list '}'
        { { setup => Bacon::Stmt::Block->new(token => $_[2]), 
            ranges => ${$_[3]}, 
            body => Bacon::Stmt::Block->new(token => $_[2], body => $_[4]) } }  
    ;

kernel_definition
    : KERNEL type_specifier function_declarator kernel_body
        { Bacon::Kernel->new(
              name  => $_[3]->{name}, 
              args  => $_[3]->{args}, 
              body  => $_[4]->{body}, 
              rets  => $_[2],
              range => $_[4]->{ranges}->{range} || [],
              group => $_[4]->{ranges}->{group} || [],
              setup => $_[4]->{setup}) }
    ;

function_definition
    : type_specifier function_declarator compound_statement
        { Bacon::Function->new(
              name => $_[2]->{name}, args => $_[2]->{args}, 
              body => $_[3], rets => $_[1]) }
    ;

%%
