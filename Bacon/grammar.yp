/* Based on ANSI C yacc grammar origionally by Jeff Lee, taken from
 * http://www.lysator.liu.se/c/ANSI-C-grammar-y.html */

%{
use warnings FATAL => 'all';
use strict;
use 5.10.0;

use Data::Dumper;
use Carp;
use Try::Tiny;

use Exporter;
push @ISA, qw(Exporter);
our @EXPORT = qw(bacon_parse);

use Bacon::Lexer qw(make_lexer);

use Bacon::Program;
use Bacon::Token;
use Bacon::Function;
use Bacon::FunArg;
use Bacon::CodeBlock;
use Bacon::VarBuilder;

use Bacon::DeclStmt;
use Bacon::ReturnStmt;
use Bacon::ExprStmt;
use Bacon::WhileLoop;
use Bacon::ForLoop;
use Bacon::DoLoop;

use Bacon::OpExpr;
use Bacon::Literal;
use Bacon::Identifier;

use Bacon::Utils;

sub parse_error {
    my ($parser) = @_;
    warn "Got a parsing error.\n";
    warn "Value: ", Dumper($parser->YYCurval), "\n";
    warn "Token: ", $parser->YYCurtok, "\n";
    warn "Expect: ", join(' ', $parser->YYExpect), "\n";
    die "Giving up";
    return 1;
}

sub bacon_parse {
    my ($source) = @_;

    my $lexer  = make_lexer($source);

    my $parser = Bacon::Parser->new();
    $parser->YYData->{pgm} = Bacon::Program->new(file => $source, line => 1);
    $parser->YYParse(yylex => $lexer, yyerror => \&parse_error);
    return $parser->YYData->{pgm};
}

sub op {
    my ($op, @args) = @_;
    for my $arg (@args) {
        try {
            unless ($arg->isa('Bacon::Expr')) {
                my $rep = ref($arg) || $arg;
                $rep .= " '" . $arg->text . "'" if ($rep eq 'Bacon::Token');
                confess "Arg ($rep) not an Expr";
            }
        }
        catch {
            confess "Error in op construction: $_ (arg: $arg)";
        };
    }
    return Bacon::OpExpr->new_args($op, @args);
}

%}

%start translation_unit

%expect 1

%%

primary_expression
    : CONSTANT
        { Bacon::Literal->new_from_token(value => $_[1]) }
    | IDENTIFIER
        { Bacon::Identifier->new_from_token(name => $_[1]) }
    | STRING_LITERAL
        { Bacon::Literal->new_from_token(value => $_[1]) }
    | '(' expression ')'
        { $_[2] }
    ;

postfix_expression
    : primary_expression
    | postfix_expression '[' argument_expression_list ']'
        { op($_[2], $_[1], @{$_[3]}) }
    | postfix_expression '(' ')'
        { op($_[2], $_[1]) }
    | postfix_expression '(' argument_expression_list ')'
        { op($_[2], $_[1], @{$_[3]}) }
    | postfix_expression '.' IDENTIFIER
        { op($_[2], $_[1], Bacon::Identifier->new_by_name($_[3])) }
    | postfix_expression PTR_OP IDENTIFIER
        { op($_[2], $_[1], Bacon::Identifier->new_by_name($_[3])) }
    | postfix_expression INC_OP
        { op($_[2], $_[1])->set_post }
    | postfix_expression DEC_OP
        { op($_[2], $_[1])->set_post }
    ;

argument_expression_list
    : assignment_expression
        { [ $_[1] ] }
    | argument_expression_list ',' assignment_expression
        { [ @{$_[1]}, $_[3] ] }
    ;

unary_expression
    : postfix_expression
    | INC_OP unary_expression
        { op($_[1], $_[2]) }
    | DEC_OP unary_expression
        { op($_[1], $_[2]) }
    | unary_operator cast_expression
        { op($_[1], $_[2]) }
    | SIZEOF unary_expression
        { op($_[1], $_[2]) }
    | SIZEOF '(' type_name ')'
        { die("todo: sizeof type") }
    ;

unary_operator
    : '&'
    | '*'
    | '+'
    | '-'
    | '~'
    | '!'
    ;

cast_expression
    : unary_expression
    | '(' type_name ')' cast_expression
        { op($_[2], $_[4]) }
    ;

multiplicative_expression
    : cast_expression
    | multiplicative_expression '*' cast_expression
        { op($_[2], $_[1], $_[3]) }
    | multiplicative_expression '/' cast_expression
        { op($_[2], $_[1], $_[3]) }
    | multiplicative_expression '%' cast_expression
        { op($_[2], $_[1], $_[3]) }
    ;

additive_expression
    : multiplicative_expression
    | additive_expression '+' multiplicative_expression
        { op($_[2], $_[1], $_[3]) }
    | additive_expression '-' multiplicative_expression
        { op($_[2], $_[1], $_[3]) }
    ;

shift_expression
    : additive_expression
    | shift_expression LEFT_OP additive_expression
        { op($_[2], $_[1], $_[3]) }
    | shift_expression RIGHT_OP additive_expression
        { op($_[2], $_[1], $_[3]) }
    ;

relational_expression
    : shift_expression
    | relational_expression '<' shift_expression
        { op($_[2], $_[1], $_[3]) }
    | relational_expression '>' shift_expression
        { op($_[2], $_[1], $_[3]) }
    | relational_expression LE_OP shift_expression
        { op($_[2], $_[1], $_[3]) }
    | relational_expression GE_OP shift_expression
        { op($_[2], $_[1], $_[3]) }
    ;

equality_expression
    : relational_expression
    | equality_expression EQ_OP relational_expression
        { op($_[2], $_[1], $_[3]) }
    | equality_expression NE_OP relational_expression
        { op($_[2], $_[1], $_[3]) }
    ;

and_expression
    : equality_expression
    | and_expression '&' equality_expression
        { op($_[2], $_[1], $_[3]) }
    ;

exclusive_or_expression
    : and_expression
    | exclusive_or_expression '^' and_expression
        { op($_[2], $_[1], $_[3]) }
    ;

inclusive_or_expression
    : exclusive_or_expression
    | inclusive_or_expression '|' exclusive_or_expression
        { op($_[2], $_[1], $_[3]) }
    ;

logical_and_expression
    : inclusive_or_expression
    | logical_and_expression AND_OP inclusive_or_expression
        { op($_[2], $_[1], $_[3]) }
    ;

logical_or_expression
    : logical_and_expression
    | logical_or_expression OR_OP logical_and_expression
        { op($_[2], $_[1], $_[3]) }
    ;

conditional_expression
    : logical_or_expression
    | logical_or_expression '?' expression ':' conditional_expression
        { op($_[2], $_[1], $_[3], $_[5]) }
    ;

assignment_expression
    : conditional_expression
    | unary_expression assignment_operator assignment_expression
        { op($_[2], $_[1], $_[3]) }
    ;

assignment_operator
    : '='
    | MUL_ASSIGN
    | DIV_ASSIGN
    | MOD_ASSIGN
    | ADD_ASSIGN
    | SUB_ASSIGN
    | LEFT_ASSIGN
    | RIGHT_ASSIGN
    | AND_ASSIGN
    | XOR_ASSIGN
    | OR_ASSIGN
    ;

expression
    : assignment_expression
    | expression ',' assignment_expression
        { op($_[2]->text, $_[1], $_[3]) }
    ;

constant_expression
    : conditional_expression
    ;

declaration
    : declaration_specifiers init_declarator_list ';'
        { [ map { $_->update_with($_[1])->decl_stmt } @{$_[2]}  ] }
    ;

declaration_specifiers
    : storage_class_specifier
        { Bacon::VarBuilder->new_by_type($_[1]) }
    | storage_class_specifier declaration_specifiers
        { $_[2]->add_type($_[1]) }
    | type_specifier
        { Bacon::VarBuilder->new_by_type($_[1]) }
    | type_specifier declaration_specifiers
        { $_[2]->add_type($_[1]) }
    | type_qualifier
        { Bacon::VarBuilder->new_by_type($_[1]) }
    | type_qualifier declaration_specifiers
        { $_[2]->add_type($_[1]) }
    ;

init_declarator_list
    : init_declarator
        { [$_[1]] }
    | init_declarator_list ',' init_declarator
        { [@$_[1], $_[3]] }
    ;

init_declarator
    : declarator
        { $_[1] }
    | declarator '=' initializer
        { $_[1]->init($_[3]); $_[1] }
    ;

storage_class_specifier
    : TYPEDEF
    | EXTERN
    | STATIC
    | AUTO
    | REGISTER
    ;

simple_type
    : UNSIGNED simple_type
        { make_unsigned($_[2]) }
    | CHAR
    | UCHAR
    | SHORT
    | USHORT
    | INT
    | UINT
    | LONG
    | ULONG
    | FLOAT
    | DOUBLE
    ;

parameterized_type
    : IMAGE2D
    | IMAGE3D
    | ARRAY2D
    | ARRAY3D
    ;

type_specifier
    : parameterized_type '<' simple_type '>'
        { Bacon::VarBuilder->new_ptype($_[1], $_[3]) }
    | simple_type
    | VOID
    | struct_or_union_specifier
        { die("No structs, unions, or typedefs.") }
    | enum_specifier
        { die("No structs, unions, or typedefs.") }
    ;

struct_or_union_specifier
    : struct_or_union IDENTIFIER '{' struct_declaration_list '}'
        { die("No structs, unions, or typedefs.") }
    | struct_or_union '{' struct_declaration_list '}'
        { die("No structs, unions, or typedefs.") }
    | struct_or_union IDENTIFIER
        { die("No structs, unions, or typedefs.") }
    ;

struct_or_union
    : STRUCT
    | UNION
    ;

struct_declaration_list
    : struct_declaration
        { make_type($_[1]) }
    | struct_declaration_list struct_declaration
        { make_type($_[1], $_[2]) }
    ;

struct_declaration
    : specifier_qualifier_list struct_declarator_list ';'
        { die("No structs, unions, or typedefs.") }
    ;

specifier_qualifier_list
    : type_specifier specifier_qualifier_list
        { Bacon::VarBuilder->new_by_type($_[1])->add_type($_[2]) }
    | type_specifier
        { Bacon::VarBuilder->new_by_type($_[1]) }
    | type_qualifier specifier_qualifier_list
        { Bacon::VarBuilder->new_by_type($_[1])->add_type($_[2]) }
    | type_qualifier
        { Bacon::VarBuilder->new_by_type($_[1]) }
    ;

struct_declarator_list
    : struct_declarator
        { die("No structs, unions, or typedefs.") }
    | struct_declarator_list ',' struct_declarator
        { die("No structs, unions, or typedefs.") }
    ;

struct_declarator
    : declarator
        { die("No structs, unions, or typedefs.") }
    | ':' constant_expression
        { die("No structs, unions, or typedefs.") }
    | declarator ':' constant_expression
        { die("No structs, unions, or typedefs.") }
    ;

enum_specifier
    : ENUM '{' enumerator_list '}'
        { die("No structs, unions, or typedefs.") }
    | ENUM IDENTIFIER '{' enumerator_list '}'
        { die("No structs, unions, or typedefs.") }
    | ENUM IDENTIFIER
        { die("No structs, unions, or typedefs.") }
    ;

enumerator_list
    : enumerator
        { die("No structs, unions, or typedefs.") }
    | enumerator_list ',' enumerator
        { die("No structs, unions, or typedefs.") }
    ;

enumerator
    : IDENTIFIER
        { die("No structs, unions, or typedefs.") }
    | IDENTIFIER '=' constant_expression
        { die("No structs, unions, or typedefs.") }
    ;

type_qualifier
    : CONST
    | VOLATILE
    ;

declarator
    : pointer direct_declarator
    | direct_declarator
    ;

direct_declarator
    : IDENTIFIER
        { Bacon::VarBuilder->new_by_name($_[1]) }
    /* | '(' declarator ')' */
    | direct_declarator '[' argument_expression_list ']'
        { $_[1]->update(dims => $_[3]) }
    | direct_declarator '[' ']'
        { $_[1]->update(dims => []) }
    | direct_declarator '(' parameter_type_list ')'
        { Bacon::Function->new_from_node($_[1])->update(args => $_[3]) }
    | direct_declarator '(' identifier_list ')'
        { Bacon::Function->new_from_node($_[1])->update(args => $_[3]) }
    | direct_declarator '(' ')'
        { Bacon::Function->new_from_node($_[1])->update(args => []) }
    ;

pointer
    : '*'
        { make_type($_[1]) }
    | '*' type_qualifier_list
        { make_type($_[1], $_[2]) }
    | '*' pointer
        { make_type($_[1], $_[2]) }
    | '*' type_qualifier_list pointer
        { make_type($_[1], $_[2], $_[3]) }
    ;

type_qualifier_list
    : type_qualifier
    | type_qualifier_list type_qualifier
    ;

parameter_type_list
    : parameter_list
    /* | parameter_list ',' ELLIPSIS */
    ;

parameter_list
    : parameter_declaration
        { [ $_[1] ] }
    | parameter_list ',' parameter_declaration
        { [ @{$_[1]}, $_[3] ] }
    ;

parameter_declaration
    : declaration_specifiers declarator
        { $_[2]->update_with($_[1])->fun_arg; } 
    | declaration_specifiers abstract_declarator
        { $_[2]->update_with($_[1])->fun_arg; } 
    | declaration_specifiers
    ;

identifier_list
    : IDENTIFIER
    | identifier_list ',' IDENTIFIER
    ;

type_name
    : specifier_qualifier_list
    | specifier_qualifier_list abstract_declarator
    ;

abstract_declarator
    : pointer
    | direct_abstract_declarator
    | pointer direct_abstract_declarator
    ;

direct_abstract_declarator
    : '(' abstract_declarator ')'
    | '[' ']'
    | '[' constant_expression ']'
    | direct_abstract_declarator '[' ']'
    | direct_abstract_declarator '[' constant_expression ']'
    | '(' ')'
    | '(' parameter_type_list ')'
    | direct_abstract_declarator '(' ')'
    | direct_abstract_declarator '(' parameter_type_list ')'
    ;

initializer
    : assignment_expression
    | '{' initializer_list '}'
    | '{' initializer_list ',' '}'
    ;

initializer_list
    : initializer
        { [ $_[1] ] }
    | initializer_list ',' initializer
        { [ @$_[1], $_[3] ] }
    ;

statement
    : labeled_statement
    | compound_statement
    | expression_statement
    | selection_statement
    | iteration_statement
    | jump_statement
    ;

labeled_statement
    : IDENTIFIER ':' statement
        { Bacon::LabeledStmt->new2($_[1], $_[3]) }
    | CASE constant_expression ':' statement
        { Bacon::CaseStmt->new2($_[2], $_[4]) }
    | DEFAULT ':' statement
        { Bacon::CaseStmt->new2($_[1], $_[3]) }
    ;

compound_statement
    : '{' '}'
        { Bacon::CodeBlock->new3($_[1], [], []) }
    | '{' declaration_list '}'
        { assert_type($_, "Bacon::DeclStmt") for @{$_[2]};
          Bacon::CodeBlock->new3($_[1], $_[2], []) }
    | '{' statement_list '}'
        { Bacon::CodeBlock->new3($_[1], [], $_[2]) }
    | '{' declaration_list statement_list '}'
        { assert_type($_, "Bacon::DeclStmt") for @{$_[2]};
          Bacon::CodeBlock->new3($_[1], $_[2], $_[3]) }
    ;

declaration_list
    : declaration
        { # One declaration declares a list of variables
          $_[1] } 
    | declaration_list declaration
        { [ @{$_[1]}, @{$_[2]} ] }
    ;

statement_list
    : statement
        { [ $_[1] ] } 
    | statement_list statement
        { [ @{$_[1]}, $_[2] ] }
    ;

expression_statement
    : ';'
        { Bacon::Stmt->new_from_token(undef => $_[1]) }
    | expression ';'
        { Bacon::ExprStmt->new2($_[2], $_[1]) }
    ;

selection_statement
    : IF '(' expression ')' statement
        { Bacon::IfStmt->new3($_[1], $_[3], $_[5]) }
    | IF '(' expression ')' statement ELSE statement
        { Bacon::IfStmt->new4($_[1], $_[3], $_[5], $_[7]) }
    | SWITCH '(' expression ')' statement
        { Bacon::SwitchStmt->new2($_[3], $_[5]) }
    ;

for_var_init
    : expression_statement
    | type_name IDENTIFIER '=' expression_statement
        { $_[1]->update(name => $_[2]->text, init => $_[4]->expr)->decl_stmt }
    ;

iteration_statement
    : WHILE '(' expression ')' statement
        { Bacon::WhileLoop->new_from_token(undef => $_[1])
            ->update(cond => $_[3], body => $_[5]) }
    | DO statement WHILE '(' expression ')' ';'
        { Bacon::DoLoop->new_from_token(undef => $_[1])
            ->update(cond => $_[5], body => $_[2]) }
    | FOR '(' for_var_init expression_statement ')' statement
        { Bacon::ForLoop->new_from_token(undef => $_[1])
            ->update(init => $_[3], cond => $_[4], body => $_[6]) }
    | FOR '(' for_var_init expression_statement expression ')' statement
        { Bacon::ForLoop->new_from_token(undef => $_[1])
            ->update(init => $_[3], cond => $_[4]->expr, 
                     incr => $_[5], body => $_[7]) }
    ;

jump_statement
    : GOTO IDENTIFIER ';'
    | CONTINUE ';'
    | BREAK ';'
    | RETURN ';'
        { Bacon::ReturnStmt->new_from_token(name => $_[1]) }
    | RETURN expression ';'
        { Bacon::ReturnStmt->new_from_token(name => $_[1])
            ->update(expr => $_[2]) }
    ;

translation_unit
    : external_declaration
    | translation_unit external_declaration
    ;

external_declaration
    : kernel_definition
        { $_[0]->YYData->{pgm}->add_function($_[1]); }
    | function_definition
        { $_[0]->YYData->{pgm}->add_function($_[1]); }
    | declaration
        { $_[0]->YYData->{pgm}->add_constant($_[1]); }
    ;

dim_spec
    : '@' '[' argument_expression_list ']' 
        { $_[3] }
    ;

kernel_definition
    : KERNEL declaration_specifiers declarator dim_spec compound_statement
        { Bacon::Function->new_kernel($_[3], $_[2]->type, $_[4], $_[5]) }
    ;

function_definition
    : declaration_specifiers declarator compound_statement
        { Bacon::Function->new_parts($_[1], $_[2], $_[3]) }
    | declarator compound_statement
        { Bacon::Function->new_parts(undef, $_[1], $_[2]) }
    ;

%%

