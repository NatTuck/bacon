#!/usr/bin/perl

=head1 NAME

bacon - OpenCL frontend, providing a better array compute notation

=head1 SYNOPSIS

bacon [OPTION]... [FILE]

=head1 DESCRIPTION

Generate OpenCL and C++ code from FILE. 

=over

=item -h

Show this documentation.

=back

=cut

use warnings FATAL => 'all';
use strict;

use 5.10.0;

use Getopt::Std qw(getopts);
use Data::Dumper;
$Data::Dumper::Terse = 1;

use Bacon::Lexer qw(make_lexer);
use Bacon::Parser;

use Bacon::Program;

my %opts;
getopts('h', \%opts);

if (defined $opts{h}) {
    system(qq{perldoc "$0"});
    exit(0);
}

sub parse_error {
    my ($parser) = @_;
    warn "Got a parsing error.\n";
    warn "Value: ", Dumper($parser->YYCurval), "\n";
    warn "Token: ", $parser->YYCurtok, "\n";
    warn "Expect: ", join(' ', $parser->YYExpect), "\n";
    return 1;
}

my $source = shift;

my $lexer  = make_lexer($source);

my $parser = Bacon::Parser->new();
$parser->YYData->{pgm} = Bacon::Program->new(file => $source, line => 1);
$parser->YYParse(yylex => $lexer, yyerror => \&parse_error);

say $parser->YYData->{pgm}->gen_code;
