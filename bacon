#!/usr/bin/perl

=head1 NAME

bacon - OpenCL frontend, providing a better array compute notation

=head1 SYNOPSIS

 bacon [OPTION]... [FILE]

 Options:
   --help           Print this message
   --ccflags        Output g++ include flags to build output.
   --ldflags        Output linker flags to build output.

 Otherwise, writes some OpenCL and C++ code in './gen' from the
 provided Bacon C source file.

=head1 DESCRIPTION

Given a source file Foo.bc, this tool will generate a C++ header
file called gen/Foo.hh that defines a Foo class with a method for
each kernel in the Bacon C source file.

=cut

use warnings FATAL => 'all';
use strict;
use 5.10.0;

use FindBin qw($Bin);
$ENV{BACON_BASE} = $Bin;
use lib $Bin;

use Bacon::CLEnv qw(ocl_ccflags ocl_ldflags ocl_write_perror);
use Bacon::Stdlib;
use Bacon::Parser;
use Bacon::Generate;

use Getopt::Long qw(GetOptions);
use Pod::Usage;

my %opt = ();
GetOptions(\%opt, 'help', 'ccflags', 'cflags', 'ldflags', 'perror', 'genstdlib=s');

if (defined $opt{help}) {
    pod2usage(1);
}

if (defined $opt{ccflags} || defined $opt{cflags}) {
    say ocl_ccflags();
    exit(0);
}

if (defined $opt{ldflags}) {
    say ocl_ldflags();
    exit(0);
}

if (defined $opt{perror}) {
    ocl_write_perror(".");
    exit(0);
}

if (defined $opt{genstdlib}) {
    my $include = $opt{genstdlib};
    Bacon::Stdlib->write_structs("$include/ocl/Bacon/Array.cl");
    exit(0);
}

my $source = shift || pod2usage(1);
my $ast = bacon_parse($source);
bacon_generate($ast);
